// STL includes
#include <vector>
#include <string>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>

// Project includes
#include <Connector.h>

using namespace std;

class ConnectorTestSuite: public CxxTest::TestSuite
{
  struct Sender: public Connectable
  {
    void sendTest(void)
    {
      emit(1);
    }
    void sendFive(void)
    {
      emit(5);
    }
    void send(uint8_t signal)
    {
      emit(signal);
    }
    Sender(Connector& _conn): Connectable(_conn) {}
  };
  struct Receiver: public Connectable
  {
    int num_received;
    Receiver(Connector& _conn): Connectable(_conn), num_received(0) {}
    virtual void onNotify(const Connectable* ,uint8_t signal)
    {
      if ( signal == 1 )
	++ num_received;
      else if ( signal == 5 )
	num_received += 5;
    }
  };
  struct GenericReceiver: public Connectable
  {
    int num_received;
    GenericReceiver(Connector& _conn): Connectable(_conn), num_received(0) {}
    virtual void onNotify(const Connectable* ,uint8_t)
    {
      ++ num_received;
    }
  };
  struct Logger: public Connector::ILogger
  {
    const Connectable* sender;
    const Connectable* receiver;
    uint8_t signal;
    virtual void log_emit(const Connectable* _sender, uint8_t _signal)
    {
      sender = _sender;
      signal = _signal;
    }
    virtual void log_notify(const Connectable* _receiver)
    {
      receiver = _receiver;
    }
  };

  Connector* pconn;
  Sender *psend;
  Receiver *precv;
  Logger* plogger;
public:
  void setUp()
  {
    pconn = new Connector;
    psend = new Sender(*pconn);
    precv = new Receiver(*pconn);
    plogger = new Logger();
  }
  void tearDown()
  {
    delete plogger;
    delete precv;
    delete psend;
    delete pconn;
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( pconn->size(), 0 );
  }
  void testAdd( void )
  {
    precv->listen(/*from*/psend,/*signal*/1);
    TS_ASSERT_EQUALS( pconn->size(), 1 );
  }
  void testSend( void )
  {
    precv->listen(/*from*/psend,/*signal*/1);
    psend->sendTest();

    TS_ASSERT_EQUALS( precv->num_received, 1 );
  }
  void testSendTwo( void )
  {
    precv->listen(/*from*/psend,/*signal*/1);
    precv->listen(/*from*/psend,/*signal*/5);
    psend->sendTest();
    psend->sendFive();

    TS_ASSERT_EQUALS( precv->num_received, 6 );
  }
  void testSendTwoSame( void )
  {
    precv->listen(/*from*/psend,/*signal*/1);
    precv->listen(/*from*/psend,/*signal*/5);
    psend->sendTest();
    psend->sendTest();

    TS_ASSERT_EQUALS( precv->num_received, 2 );
  }
  void testSendMissing( void )
  {
    precv->listen(/*from*/psend,/*signal*/1);
    precv->listen(/*from*/psend,/*signal*/0xff);
    psend->sendTest();

    TS_ASSERT_EQUALS( precv->num_received, 1 );
  }
  void testNullEmitter( void )
  {
    precv->listen(/*from*/NULL,/*signal*/1);
    psend->sendTest();
    
    TS_ASSERT_EQUALS( precv->num_received, 1 );
  }
  void testNoListeners( void )
  {
    psend->sendTest();
    TS_ASSERT_EQUALS( precv->num_received, 0 );
  }
  void testListenAll( void )
  {
    precv->listen(/*from*/NULL,/*signal*/1);
    psend->sendTest();
    
    TS_ASSERT_EQUALS( precv->num_received, 1 );
  }
  void testLogger( void )
  {
    pconn->setLogger(plogger);
    precv->listen(/*from*/psend,/*signal*/1);
    psend->sendTest();

    TS_ASSERT_EQUALS( plogger->sender, psend );
    TS_ASSERT_EQUALS( plogger->signal, 1 );
    TS_ASSERT_EQUALS( plogger->receiver, precv );
  }
  void testNoListenZero( void )
  {
    GenericReceiver generic(*pconn); 
    generic.listen(/*from*/psend,/*signal*/0);
    psend->send(0);
    psend->send(1);

    TS_ASSERT_EQUALS( generic.num_received, 0 );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
