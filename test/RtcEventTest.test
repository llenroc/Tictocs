// STL includes
#include <vector>
#include <string>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>

// Project includes
#include <RtcEvent.h>
#include <Connector.h>
#include <Globals.h>

#include <Arduino.h>
#include <RTClib.h>
#include <RTC_native.h>

using namespace std;

class RtcEventTestSuite: public CxxTest::TestSuite
{
  static const uint8_t signal_go = 1;
  
  struct listener: public Connectable
  {
    int fired;
    listener(Connector& _conn): Connectable(_conn), fired(0) {}
    void onNotify(const Connectable*, uint8_t /*signal*/)
    {
      ++fired;
    }
  };  
  
  RTC_native rtc;
  
  RtcEvent* prtce;  
  Updater* pa;
  Connector* pc;
  listener* plisten;
public:
  void setUp()
  {
    mock_time_reset();

    pa = new Updater();
    pc = new Connector();
    prtce = NULL;
    plisten = new listener(*pc);

    rtc.begin();
    RtcEvent::setRtc(rtc);
  }

  void tearDown( void )
  {
    delete plisten;
    if ( prtce )
      delete prtce;
    delete pc;
    delete pa;
    theLogger.setVerbose(false);
  }

  void testEmpty( void )
  {
    prtce = new RtcEvent(*pc,DateTime(),signal_go);
    TS_ASSERT(prtce);
  }

  void testUpdate( void )
  {
    prtce = new RtcEvent(*pc,DateTime(),signal_go);
    pa->add(prtce);
  }
  
  void testFires( void )
  {
    DateTime clock = rtc.now();
    clock += 5;
    prtce = new RtcEvent(*pc,clock,signal_go);
    prtce->begin();
    pa->add(prtce);
    plisten->listen(prtce,signal_go);
    
    clock += 5;
    rtc.adjust(clock);
    pa->update();
    TS_ASSERT_EQUALS(plisten->fired,1);
  }
  void testDoesntFireOld( void )
  {
    DateTime clock = rtc.now();
    clock += -5;
    prtce = new RtcEvent(*pc,clock,signal_go);
    prtce->begin();
    pa->add(prtce);
    plisten->listen(prtce,signal_go);
    
    clock += 5;
    rtc.adjust(clock);
    pa->update();
    TS_ASSERT_EQUALS(plisten->fired,0);
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
