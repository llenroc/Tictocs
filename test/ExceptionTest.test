// STL includes
#include <vector>
#include <string>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>

// Project includes
#include <Connector.h>
#include <Exception.h>

using namespace std;

class ExceptionTestSuite: public CxxTest::TestSuite
{
  struct TestConnectable: public Connectable
  {
    TestConnectable(Connector& _conn): Connectable(_conn) {}
  };
  struct Receiver: public Connectable
  {
    int num_received;
    Receiver(Connector& _conn): Connectable(_conn), num_received(0) {}
    virtual void onNotify(const Connectable* ,const char* signal)
    {
      if ( !strcmp(signal,"exception") )
	++ num_received;
    }
  };
  struct WhatReceiver: public Connectable
  {
    string what;
    WhatReceiver(Connector& _conn): Connectable(_conn) {}
    virtual void onNotify(const Connectable* pc,const char* signal)
    {
      if ( string(signal) == "exception")
      {
	const Exception* pe = dynamic_cast<const Exception*>(pc);
	if ( pe )
	{
	  what = pe->what();
	}
      }
    }
  };
  Connector* pconn;
  TestConnectable* pcable;
  Exception* pe;
public:
  void setUp()
  {
    pconn = new Connector;
    pcable = new TestConnectable(*pconn);
  }
  void tearDown()
  {
    delete pcable;
    delete pconn; 
  }

  void testCreate( void )
  {
    Exception e(pcable,"Test");

    TS_ASSERT_EQUALS( string(e.what()) , "Test" )
  }
  
  void testCreateVargs( void )
  {
    Exception e(pcable,"Test %i",123);

    TS_ASSERT_EQUALS( string(e.what()) , "Test 123" )
  }
  
  void testCatch( void )
  {
    Receiver ex_handler(*pconn);
    ex_handler.listen(NULL,"exception");
    
    Exception e(pcable,"Test");

    TS_ASSERT_EQUALS( ex_handler.num_received , 1 )
  }
  
  void testGetWhat( void )
  {
    WhatReceiver ex_handler(*pconn);
    ex_handler.listen(NULL,"exception");
    
    Exception e(pcable,"Test");

    TS_ASSERT_EQUALS( ex_handler.what, "Test" )
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
