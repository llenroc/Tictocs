// STL includes
#include <vector>
#include <string>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>
#include <WProgram.h>

// Project includes
#include <Updater.h>
#include <Timer.h>

using namespace std;

extern "C" void mock_time_reset(void);

class TimerTestSuite: public CxxTest::TestSuite
{
  struct TestTimer: public Timer
  {
    int num_fired;
    TestTimer(unsigned long _interval): Timer(_interval), num_fired(0) {}
    void onFired(void) { ++num_fired; }
  };
  Timer* pt;
  TestTimer* pot;
  Updater* pmanager;
public:
  void setUp()
  {
    pt = new Timer(200);
    pot = new TestTimer(200);
    pmanager = new Updater();
    
    mock_time_reset();
  }
  void tearDown()
  {
    delete pmanager;
    delete pot;
    delete pt;
  }

  void testEmpty( void )
  {
    TS_ASSERT_EQUALS( pt->wasFired(), false );
  }
  void testUpdate( void )
  {
    pmanager->add(pt);
    pmanager->update();
    
    TS_ASSERT_EQUALS( pt->wasFired(), false );
  }
  void testFired( void )
  {
    pmanager->add(pt);
    pmanager->update();
    delay(250);
    pmanager->update();
    
    TS_ASSERT_EQUALS( pt->wasFired(), true );
    TS_ASSERT_EQUALS( pt->wasFired(), false );
  }
  void testNotFired( void )
  {
    pmanager->add(pt);
    pmanager->update();
    delay(20);
    pmanager->update();
    
    TS_ASSERT_EQUALS( pt->wasFired(), false );
  }
  void testFiredTwice( void )
  {
    pmanager->add(pt);
    pmanager->update();
    delay(250);
    pmanager->update();
    pt->wasFired(); // swallow the first one
    delay(250);
    pmanager->update();
    
    TS_ASSERT_EQUALS( pt->wasFired(), true );
    TS_ASSERT_EQUALS( pt->wasFired(), false );
  }
  void testFiredOverride( void )
  {
    pmanager->add(pot);
    pmanager->update();
    delay(250);
    pmanager->update();
    
    TS_ASSERT_EQUALS( pot->num_fired, 1 );
  }
  void testReset( void )
  {
    pmanager->add(pt);
    pmanager->update();
    delay(100);
    pmanager->update();
    pt->reset();
    delay(150);
    pmanager->update();
    
    TS_ASSERT_EQUALS( pt->wasFired(), false );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
